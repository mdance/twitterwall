<?php

/**
 * Implementation of hook_perm().
 */
function twitterwall_perm() {
  return array(
    'administer twitterwall',
    'add tweets',
    'enter custom twitter handle', // silly name    
  );
}

/**
 * Implementation of hook_menu().
 */
function twitterwall_menu() {
  $items['twitterwall'] = array(
    'title' => 'On Twitter',
    'page callback' => 'twitterwall_page',
    'access arguments' => array('access content'),
    'type' => MENU_SUGGESTED_ITEM,
  );

  $items['admin/settings/twitterwall'] = array(
    'title' => 'Twitter Wall',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('twitterwall_adminpage'),
    'access arguments' => array('administer twitterwall'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'twitterwall.admin.inc',
  );

  $items['admin/settings/twitterwall/admin'] = array(
    'title' => 'Administer Tweets',
    'page callbacks' => 'drupal_get_form',
    'page arguments' => array('twitterwall_adminpage'),
    'access arguments' => array('administer twitterwall'),
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => 0,
    'file' => 'twitterwall.admin.inc',
  );

  $items['admin/settings/twitterwall/add'] = array(
    'title' => 'Add Tweet',
    'page callbacks' => 'drupal_get_form',
    'page arguments' => array('twitterwall_add_tweet_form'),
    'access arguments' => array('add tweets'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 10,
    'file' => 'twitterwall.admin.inc',
  );

  $items['admin/settings/twitterwall/settings'] = array(
    'title' => 'Settings',
    'page callbacks' => 'drupal_get_form',
    'page arguments' => array('twitterwall_admin_settings'),
    'access arguments' => array('administer twitterwall'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 15,
  );

  return $items;
}

/**
 * Implement hook_block() 
 */
function twitterwall_block($op = 'list', $delta = 0, $edit = array()) {
  switch ( $op ) {
    case 'list' :
      $blocks[0] = array(
        'info' => t('TwitterWall'),
        'cache' => BLOCK_NO_CACHE,
      ) ;
      return $blocks ;
    case 'view' :
      $block = array(
        'subject' => t('TwitterWall'),
        'content' => twitterwall_page(),
      ) ;
      return $block ;
    case 'configure' :
    case 'save' :
      // ?
      return ;
  }
}

/**
 * Performs a twitter search.
 *
 * @param $search
 *   A search string.
 *
 * @return
 *   An array of search results.
 */
function twitterwall_twitter_search($search) {
  // This code was taken from the twitter module as I found the twitter module
  // to be a bit too bloated for such a simple use
  $output = array();

  $url = 'http://search.twitter.com/search.json?q=' . urlencode($search['search']) . '&show_user=true&rpp=' . $search['rpp'];

  if ( $search['last_twitter_id'] ) {
    $url .= '&since_id=' . $search['last_twitter_id'];
  }

  $response = drupal_http_request($url, array(), 'GET');

  if ( twitterwall_validrequest($response) ) {
    $output = twitterwall_js2array($response->data);
  }

  return $output;
}

/**
 * Internal JSON munging code.
 *
 * @param $data
 *  JSON string returned by Twitter.
 */
function twitterwall_js2array($data) {
  // Thanks twitter module
  $results = array();
  $json = json_decode($data);

  if (!empty($json->results)) {
    foreach($json->results as $status) {
      $array = (array)$status;

      $array['created_at_epoch'] = strtotime($array['created_at']);

      $results[] = $array;
    }
  }

  return $results;
}

/**
 * Internal helper function to deal cleanly with various HTTP response codes.
 */
function twitterwall_validrequest($results) {
  // Thanks twitter module
  switch ($results->code) {
    case '304':
      // 304 Not Modified: there was no new data to return.
      return FALSE;
    case 400:
      // 400 Bad Request: your request is invalid, and we'll return an error message that tells you why. This is the status code returned if you've exceeded the rate limit
      watchdog('twitter', '400 Bad Request.');
      return FALSE;
    case 401:
      // 401 Not Authorized: either you need to provide authentication credentials, or the credentials provided aren't valid.
      watchdog('twitter', '401 Not Authorized.');
      return FALSE;
    case 403:
      // 403 Forbidden: we understand your request, but are refusing to fulfill it.  An accompanying error message should explain why.
      watchdog('twitter', '403 Forbidden.');
      return FALSE;
    case 404:
      // 404 Not Found: either you're requesting an invalid URI or the resource in question doesn't exist (ex: no such user).
      watchdog('twitter', '404 Not Found.');
      return FALSE;
    case 500:
      // 500 Internal Server Error: we did something wrong.  Please post to the group about it and the Twitter team will investigate.
      watchdog('twitter', '500 Internal Server Error.');
      return FALSE;
    case 502:
      // 502 Bad Gateway: returned if Twitter is down or being upgraded.
      watchdog('twitter', '502 Bad Gateway.');
      return FALSE;
    case 503:
      // 503 Service Unavailable: the Twitter servers are up, but are overloaded with requests.  Try again later.
      watchdog('twitter', '503 Service Unavailable.');
      return FALSE;
  }
  // 200 OK: everything went awesome.
  return TRUE;
}

/**
 * Implementation of hook_cron().
 */
function twitterwall_cron() {
  // Retrieve tweets every hour regardless of how often cron is run
  $threshold = variable_get('twitterwall_threshold', 3600);

  $time = time();
  $lastsearchtime = variable_get('twitterwall_lastsearchtime', 0);

  if ( ( $time - $lastsearchtime ) >= $threshold ) {
    // Update the last search time
    variable_set('twitterwall_lastsearchtime', $time);

    $searchstring = variable_get('twitterwall_string', '#drupal');

    $lastsearchstring = variable_get('twitterwall_lastsearch', '');

    $delete = variable_get('twitterwall_delete', 'no');

    $lasttwitterid = NULL;

    if ( $delete == 'yes' ) {
      // If the site administrator wants to delete the last twitter id
      variable_del('twitterwall_last_twitter_id');
      // Set the delete flag back to no
      variable_set('twitterwall_delete', 'no');
    }
    else {
      $lasttwitterid = variable_get('twitterwall_last_twitter_id', NULL);
    }

    if ( $searchstring != $lastsearchstring ) {
      variable_set('twitterwall_lastsearch', $searchstring);
    }

    $count = variable_get('twitterwall_count', 50);

    $search = array(
      'search' => $searchstring,
      'rpp' => $count,
      'last_twitter_id' => $lasttwitterid,
    );

    $results = twitterwall_twitter_search($search);

    if ( is_array($results) && count($results) ) {
      $cache = FALSE;

      $status = variable_get('twitterwall_status', 0);

      foreach ( $results as $result ) {
        if ( !$cache ) {
          variable_set('twitterwall_last_twitter_id', $result['id']);
          $cache = TRUE;
        }

        $sql = <<<EOF
INSERT INTO {twitterwall}(tweetid, created_at_epoch, created_at, profile_image_url, from_user, from_userid, to_user, message, status)
VALUES('%s', %d, '%s', '%s', '%s', '%s', '%s', '%s', %d)
EOF;

        db_query($sql, $result['id'], strtotime($result['created_at']), $result['created_at'], $result['profile_image_url'], $result['from_user'], $result['from_user_id'], $result['to_user_id'], $result['text'], $status);
      }
    }
  }
}

function twitterwall_page() {
  $sql = <<<EOF
SELECT
*
FROM
{twitterwall}
WHERE
status = 1
ORDER BY created_at_epoch DESC
LIMIT 0, 132
EOF;

  $result = db_query($sql);

  $rows = array();

  if ( $result ) {
    while ( $row = db_fetch_array($result) ) {
      $rows[] = $row;
    }
  }

  if ( count($rows) ) {
    $path = drupal_get_path('module', 'twitterwall');

    drupal_add_css($path . '/css/twitterwall.css');
    drupal_add_js($path . '/js/jquery.qtip-1.0.0-rc3.js');
    drupal_add_js($path . '/js/twitterwall.js');

    $output = theme('twitterwall_cloud', $rows);
  }
  else {
    $output = t('There are no tweets available at this time.');
  }

  return $output;
}

/**
 * Implementation of hook_theme().
 */
function twitterwall_theme() {
  return array(
    'twitterwall_cloud' => array(
      'arguments' => array(
        'rows' => NULL,
      ),
    ),
    'twitterwall_admin_tweets' => array(
      'arguments' => array(
        'form' => NULL,
      ),
      'file' => 'twitterwall.admin.inc',
    ),
  );
}

function theme_twitterwall_cloud($rows) {
  $output = '';

  if ( is_array($rows) ) {
    foreach ( $rows as $row ) {
      $output .= <<<EOF
<div class="tweet" style="float: left; width: 48px; height: 48px; overflow: hidden;">
  <a href="http://twitter.com/{$row['from_user']}/status/{$row['tweetid']}" target="new"><img src="{$row['profile_image_url']}" alt="{$row['message']}" title="{$row['message']}" /></a>
</div>
EOF;
    }
  }

  return $output;
}

function twitterwall_add_tweet($result, $cache) {
  if ( !$cache ) {
    variable_set('twitterwall_last_twitter_id', $result['id']);
    $cache = TRUE;
  }
  
  $sql = <<<EOF
INSERT INTO {twitterwall} (tweetid, created_at_epoch, created_at, profile_image_url, from_user, from_userid, to_user, message, status)
     VALUES ('%s', %d, '%s', '%s', '%s', '%s', '%s', '%s', %d)
EOF;

  db_query($sql, $result['id'], strtotime($result['created_at']), $result['created_at'], $result['profile_image_url'], $result['from_user'], $result['from_user_id'], $result['to_user_id'], $result['text'], $status);
}

